/**
****************************************************
*  Java based PDF creation and manipulation Library      
****************************************************
*
*  Project Title: Gnostice PDFOne Java
*  Copyright © 2002-2008 Gnostice Information Technologies Private Limited, Bangalore, India
*  http://www.gnostice.com
*
*  This file is part of PDFOne Java Library.
*
*  This program is free software: you can redistribute it and/or modify
*  it under the terms of the GNU General Public License as published by
*  the Free Software Foundation, either version 3 of the License, or
*  (at your option) any later version.
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU General Public License for more details.

*  You should have received a copy of the GNU General Public License
*  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*
*/

package com.gnostice.pdfone.fonts;

import java.util.HashMap;

import com.gnostice.pdfone.PdfMeasurement;
import com.gnostice.pdfone.PdfName;

final class PdfType1Font extends PdfFont
{
    private int ascender;
    
    private int descender;
    
    private void fillWidths()
    {
        Integer id = (Integer) builtInFonts.get(this.name
            .toUpperCase());
        if (id == null)
        {
            return;
        }
        int i = id.intValue();
        if (i == 6 || i == 7) /*Helvetica and Arial*/
        {
            if ((style & BOLD) == BOLD)
            {
                if ((style & ITALIC) == ITALIC)
                {
                    i = 10;                    
                }
                else i = 8;
            }
            else if ((style & ITALIC) == ITALIC)
            {
                i = 9;
            }
        }
        else if (i == 11 || i == 12) /*Times-Roman and Times New Roman*/
        {
            if ((style & BOLD) == BOLD)
            {
                if ((style & ITALIC) == ITALIC)
                {
                    i = 15;                    
                }
                else i = 13;
            }
            else if ((style & ITALIC) == ITALIC)
            {
                i = 14;
            }
        }

        switch (i)
        {
            case 1: /* courier */
            case 2:
            case 3:
            case 4:
            case 5:
                widths = new int[220];
                for (int j = 0; j < 220; j++)
                {
                    widths[j] = 600;
                }
                break;
            case 6: /* Helvetica and Arial */
            case 7:
                ascender = 931;
                descender = 225;
                widths = new int[] { 278, 278, 355, 556, 556, 889,
                    667, 222, 333, 333, 389, 584, 278, 333, 278, 278,
                    556, 556, 556, 556, 556, 556, 556, 556, 556, 556,
                    278, 278, 584, 584, 584, 556, 1015, 667, 667,
                    722, 722, 667, 611, 778, 722, 278, 500, 667, 556,
                    833, 722, 778, 667, 778, 722, 667, 611, 722, 667,
                    944, 667, 667, 611, 278, 278, 278, 469, 556, 222,
                    556, 556, 500, 556, 556, 278, 556, 556, 222, 222,
                    500, 222, 833, 556, 556, 556, 556, 333, 500, 278,
                    556, 500, 722, 500, 500, 500, 334, 260, 334, 584,
                    333, 556, 556, 167, 556, 556, 556, 556, 191, 333,
                    556, 333, 333, 500, 500, 556, 556, 556, 278, 537,
                    350, 222, 333, 333, 556, 1000, 1000, 611, 333,
                    333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
                    333, 333, 1000, 1000, 370, 556, 778, 1000, 365,
                    889, 278, 222, 611, 944, 611, 278, 556, 556, 556,
                    556, 667, 584, 667, 667, 556, 722, 500, 500, 556,
                    722, 722, 556, 722, 556, 667, 722, 250, 737, 667,
                    500, 556, 722, 222, 556, 611, 722, 556, 667, 500,
                    500, 278, 471, 722, 778, 556, 556, 667, 333, 500,
                    611, 667, 778, 722, 667, 643, 722, 556, 333, 778,
                    667, 667, 584, 556, 611, 476, 500, 722, 278, 667,
                    556, 556, 500, 556, 556, 722, 278, 584, 260, 737,
                    778, 278, 600, 667, 333, 556, 611, 611, 549, 722,
                    722, 222, 317, 556, 722, 667, 667, 556, 500, 222,
                    778, 556, 556, 500, 278, 778, 722, 612, 556, 333,
                    778, 556, 278, 556, 667, 556, 834, 667, 299, 667,
                    556, 1000, 556, 278, 278, 556, 834, 549, 556,
                    556, 722, 667, 556, 556, 834, 667, 667, 778, 400,
                    556, 722, 556, 453, 722, 333, 722, 556, 722, 556,
                    667, 667, 667, 778, 500, 667, 278, 500, 584, 278,
                    556, 278, 584, 556, 556, 549, 556, 556, 500, 556,
                    333, 278, 556 };
                break;
            case 8: /* Helvetica-Bold */
                widths = new int[] { 278, 333, 474, 556, 556, 889,
                    722, 278, 333, 333, 389, 584, 278, 333, 278, 278,
                    556, 556, 556, 556, 556, 556, 556, 556, 556, 556,
                    333, 333, 584, 584, 584, 611, 975, 722, 722, 722,
                    722, 667, 611, 778, 722, 278, 556, 722, 611, 833,
                    722, 778, 667, 778, 722, 667, 611, 722, 667, 944,
                    667, 667, 611, 333, 278, 333, 584, 556, 278, 556,
                    611, 556, 611, 556, 333, 611, 611, 278, 278, 556,
                    278, 889, 611, 611, 611, 611, 389, 556, 333, 611,
                    556, 778, 556, 556, 500, 389, 280, 389, 584, 333,
                    556, 556, 167, 556, 556, 556, 556, 238, 500, 556,
                    333, 333, 611, 611, 556, 556, 556, 278, 556, 350,
                    278, 500, 500, 556, 1000, 1000, 611, 333, 333,
                    333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
                    333, 1000, 1000, 370, 611, 778, 1000, 365, 889,
                    278, 278, 611, 944, 611, 278, 556, 556, 611, 556,
                    667, 584, 667, 722, 556, 722, 556, 556, 556, 722,
                    722, 556, 722, 611, 667, 722, 250, 737, 667, 556,
                    556, 722, 278, 556, 611, 722, 556, 667, 556, 556,
                    278, 494, 722, 778, 611, 556, 722, 389, 556, 611,
                    667, 778, 722, 667, 743, 722, 611, 333, 778, 722,
                    722, 584, 611, 611, 494, 556, 722, 278, 667, 556,
                    556, 556, 611, 611, 722, 278, 584, 280, 737, 778,
                    278, 600, 667, 389, 611, 611, 611, 549, 722, 722,
                    278, 389, 556, 722, 722, 722, 556, 500, 278, 778,
                    611, 556, 556, 278, 778, 722, 612, 611, 333, 778,
                    611, 278, 611, 667, 611, 834, 667, 400, 722, 611,
                    1000, 556, 278, 278, 611, 834, 549, 611, 611,
                    722, 667, 556, 611, 834, 667, 667, 778, 400, 611,
                    722, 611, 549, 722, 389, 722, 611, 722, 611, 722,
                    722, 722, 778, 500, 667, 278, 556, 584, 278, 611,
                    333, 584, 611, 611, 549, 611, 611, 500, 611, 333,
                    278, 556 };
                break;
            case 9: /* HELVETICA-OBLIQUE */
                widths = new int[] { 278, 278, 355, 556, 556, 889,
                    667, 222, 333, 333, 389, 584, 278, 333, 278, 278,
                    556, 556, 556, 556, 556, 556, 556, 556, 556, 556,
                    278, 278, 584, 584, 584, 556, 1015, 667, 667,
                    722, 722, 667, 611, 778, 722, 278, 500, 667, 556,
                    833, 722, 778, 667, 778, 722, 667, 611, 722, 667,
                    944, 667, 667, 611, 278, 278, 278, 469, 556, 222,
                    556, 556, 500, 556, 556, 278, 556, 556, 222, 222,
                    500, 222, 833, 556, 556, 556, 556, 333, 500, 278,
                    556, 500, 722, 500, 500, 500, 334, 260, 334, 584,
                    333, 556, 556, 167, 556, 556, 556, 556, 191, 333,
                    556, 333, 333, 500, 500, 556, 556, 556, 278, 537,
                    350, 222, 333, 333, 556, 1000, 1000, 611, 333,
                    333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
                    333, 333, 1000, 1000, 370, 556, 778, 1000, 365,
                    889, 278, 222, 611, 944, 611, 278, 556, 556, 556,
                    556, 667, 584, 667, 667, 556, 722, 500, 500, 556,
                    722, 722, 556, 722, 556, 667, 722, 250, 737, 667,
                    500, 556, 722, 222, 556, 611, 722, 556, 667, 500,
                    500, 278, 471, 722, 778, 556, 556, 667, 333, 500,
                    611, 667, 778, 722, 667, 643, 722, 556, 333, 778,
                    667, 667, 584, 556, 611, 476, 500, 722, 278, 667,
                    556, 556, 500, 556, 556, 722, 278, 584, 260, 737,
                    778, 278, 600, 667, 333, 556, 611, 611, 549, 722,
                    722, 222, 317, 556, 722, 667, 667, 556, 500, 222,
                    778, 556, 556, 500, 278, 778, 722, 612, 556, 333,
                    778, 556, 278, 556, 667, 556, 834, 667, 299, 667,
                    556, 1000, 556, 278, 278, 556, 834, 549, 556,
                    556, 722, 667, 556, 556, 834, 667, 667, 778, 400,
                    556, 722, 556, 453, 722, 333, 722, 556, 722, 556,
                    667, 667, 667, 778, 500, 667, 278, 500, 584, 278,
                    556, 278, 584, 556, 556, 549, 556, 556, 500, 556,
                    333, 278, 556 };
                break;
            case 10: /* HELVETICA-BOLDOBLIQUE */
                widths = new int[] { 278, 333, 474, 556, 556, 889,
                    722, 278, 333, 333, 389, 584, 278, 333, 278, 278,
                    556, 556, 556, 556, 556, 556, 556, 556, 556, 556,
                    333, 333, 584, 584, 584, 611, 975, 722, 722, 722,
                    722, 667, 611, 778, 722, 278, 556, 722, 611, 833,
                    722, 778, 667, 778, 722, 667, 611, 722, 667, 944,
                    667, 667, 611, 333, 278, 333, 584, 556, 278, 556,
                    611, 556, 611, 556, 333, 611, 611, 278, 278, 556,
                    278, 889, 611, 611, 611, 611, 389, 556, 333, 611,
                    556, 778, 556, 556, 500, 389, 280, 389, 584, 333,
                    556, 556, 167, 556, 556, 556, 556, 238, 500, 556,
                    333, 333, 611, 611, 556, 556, 556, 278, 556, 350,
                    278, 500, 500, 556, 1000, 1000, 611, 333, 333,
                    333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
                    333, 1000, 1000, 370, 611, 778, 1000, 365, 889,
                    278, 278, 611, 944, 611, 278, 556, 556, 611, 556,
                    667, 584, 667, 722, 556, 722, 556, 556, 556, 722,
                    722, 556, 722, 611, 667, 722, 250, 737, 667, 556,
                    556, 722, 278, 556, 611, 722, 556, 667, 556, 556,
                    278, 494, 722, 778, 611, 556, 722, 389, 556, 611,
                    667, 778, 722, 667, 743, 722, 611, 333, 778, 722,
                    722, 584, 611, 611, 494, 556, 722, 278, 667, 556,
                    556, 556, 611, 611, 722, 278, 584, 280, 737, 778,
                    278, 600, 667, 389, 611, 611, 611, 549, 722, 722,
                    278, 389, 556, 722, 722, 722, 556, 500, 278, 778,
                    611, 556, 556, 278, 778, 722, 612, 611, 333, 778,
                    611, 278, 611, 667, 611, 834, 667, 400, 722, 611,
                    1000, 556, 278, 278, 611, 834, 549, 611, 611,
                    722, 667, 556, 611, 834, 667, 667, 778, 400, 611,
                    722, 611, 549, 722, 389, 722, 611, 722, 611, 722,
                    722, 722, 778, 500, 667, 278, 556, 584, 278, 611,
                    333, 584, 611, 611, 549, 611, 611, 500, 611, 333,
                    278, 556 };
                break;
            case 11: /* TIMES-ROMAN & TIMES NEW ROMAN */
            case 12:
                widths = new int[] { 250, 333, 408, 500, 500, 833,
                    778, 333, 333, 333, 500, 564, 250, 333, 250, 278,
                    500, 500, 500, 500, 500, 500, 500, 500, 500, 500,
                    278, 278, 564, 564, 564, 444, 921, 722, 667, 667,
                    722, 611, 556, 722, 722, 333, 389, 722, 611, 889,
                    722, 722, 556, 722, 667, 556, 611, 722, 722, 944,
                    722, 722, 611, 333, 278, 333, 469, 500, 333, 444,
                    500, 444, 500, 444, 333, 500, 500, 278, 278, 500,
                    278, 778, 500, 500, 500, 500, 333, 389, 278, 500,
                    500, 722, 500, 500, 444, 480, 200, 480, 541, 333,
                    500, 500, 167, 500, 500, 500, 500, 180, 444, 500,
                    333, 333, 556, 556, 500, 500, 500, 250, 453, 350,
                    333, 444, 444, 500, 1000, 1000, 444, 333, 333,
                    333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
                    333, 1000, 889, 276, 611, 722, 889, 310, 667,
                    278, 278, 500, 722, 500, 333, 444, 444, 500, 444,
                    722, 564, 722, 722, 444, 722, 500, 389, 444, 722,
                    722, 444, 722, 500, 611, 722, 250, 760, 611, 444,
                    444, 722, 278, 444, 611, 667, 444, 611, 389, 389,
                    278, 471, 667, 722, 500, 444, 722, 333, 444, 611,
                    556, 722, 667, 556, 588, 722, 500, 300, 722, 722,
                    722, 564, 500, 611, 476, 500, 722, 278, 611, 444,
                    444, 444, 500, 500, 722, 333, 564, 200, 760, 722,
                    333, 600, 611, 333, 500, 611, 611, 549, 722, 667,
                    278, 326, 444, 722, 722, 722, 444, 444, 278, 722,
                    500, 444, 389, 278, 722, 722, 612, 500, 300, 722,
                    500, 278, 500, 611, 500, 750, 556, 344, 722, 611,
                    980, 444, 333, 333, 611, 750, 549, 500, 500, 722,
                    611, 444, 500, 750, 556, 556, 722, 400, 500, 667,
                    500, 453, 722, 333, 722, 500, 667, 611, 722, 722,
                    722, 722, 444, 611, 333, 500, 564, 333, 500, 278,
                    564, 500, 500, 549, 500, 500, 444, 500, 300, 278,
                    500 };
                break;
            case 13: /* TIMES-BOLD */
                widths = new int[] { 250, 333, 555, 500, 500, 1000,
                    833, 333, 333, 333, 500, 570, 250, 333, 250, 278,
                    500, 500, 500, 500, 500, 500, 500, 500, 500, 500,
                    333, 333, 570, 570, 570, 500, 930, 722, 667, 722,
                    722, 667, 611, 778, 778, 389, 500, 778, 667, 944,
                    722, 778, 611, 778, 722, 556, 667, 722, 722,
                    1000, 722, 722, 667, 333, 278, 333, 581, 500,
                    333, 500, 556, 444, 556, 444, 333, 500, 556, 278,
                    333, 556, 278, 833, 556, 500, 556, 556, 444, 389,
                    333, 556, 500, 722, 500, 500, 444, 394, 220, 394,
                    520, 333, 500, 500, 167, 500, 500, 500, 500, 278,
                    500, 500, 333, 333, 556, 556, 500, 500, 500, 250,
                    540, 350, 333, 500, 500, 500, 1000, 1000, 500,
                    333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
                    333, 333, 333, 1000, 1000, 300, 667, 778, 1000,
                    330, 722, 278, 278, 500, 722, 556, 389, 444, 500,
                    556, 444, 722, 570, 722, 722, 500, 722, 500, 389,
                    444, 722, 722, 500, 722, 556, 667, 722, 250, 747,
                    667, 444, 500, 722, 278, 500, 667, 722, 500, 667,
                    389, 389, 278, 494, 722, 778, 556, 500, 722, 444,
                    444, 667, 611, 778, 722, 556, 672, 722, 556, 300,
                    778, 722, 722, 570, 556, 667, 494, 500, 722, 278,
                    667, 500, 444, 444, 556, 556, 722, 389, 570, 220,
                    747, 778, 389, 600, 667, 444, 500, 667, 667, 549,
                    722, 722, 278, 416, 444, 722, 722, 722, 444, 444,
                    278, 778, 500, 500, 389, 278, 778, 722, 612, 556,
                    300, 778, 556, 278, 500, 667, 556, 750, 556, 394,
                    778, 667, 1000, 444, 389, 389, 667, 750, 549,
                    500, 556, 722, 667, 444, 500, 750, 556, 556, 778,
                    400, 500, 722, 556, 549, 722, 444, 722, 500, 722,
                    667, 722, 722, 722, 778, 444, 667, 389, 556, 570,
                    389, 556, 333, 570, 500, 556, 549, 500, 500, 444,
                    556, 300, 278, 500 };
                break;
            case 14: /* TIMES-ITALIC */
                widths = new int[] { 250, 333, 420, 500, 500, 833,
                    778, 333, 333, 333, 500, 675, 250, 333, 250, 278,
                    500, 500, 500, 500, 500, 500, 500, 500, 500, 500,
                    333, 333, 675, 675, 675, 500, 920, 611, 611, 667,
                    722, 611, 611, 722, 722, 333, 444, 667, 556, 833,
                    667, 722, 611, 722, 611, 500, 556, 722, 611, 833,
                    611, 556, 556, 389, 278, 389, 422, 500, 333, 500,
                    500, 444, 500, 444, 278, 500, 500, 278, 278, 444,
                    278, 722, 500, 500, 500, 500, 389, 389, 278, 500,
                    444, 667, 444, 444, 389, 400, 275, 400, 541, 389,
                    500, 500, 167, 500, 500, 500, 500, 214, 556, 500,
                    333, 333, 500, 500, 500, 500, 500, 250, 523, 350,
                    333, 556, 556, 500, 889, 1000, 500, 333, 333,
                    333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
                    333, 889, 889, 276, 556, 722, 944, 310, 667, 278,
                    278, 500, 667, 500, 333, 444, 500, 500, 444, 556,
                    675, 556, 611, 500, 722, 444, 389, 444, 722, 722,
                    500, 722, 500, 611, 722, 250, 760, 611, 444, 500,
                    667, 278, 500, 556, 667, 500, 611, 389, 389, 278,
                    471, 611, 722, 500, 500, 611, 389, 444, 556, 611,
                    722, 611, 500, 544, 722, 500, 300, 722, 611, 611,
                    675, 500, 556, 476, 444, 667, 278, 611, 500, 444,
                    444, 500, 500, 667, 333, 675, 275, 760, 722, 333,
                    600, 611, 389, 500, 556, 556, 549, 722, 667, 278,
                    300, 444, 722, 611, 611, 444, 389, 278, 722, 500,
                    500, 389, 278, 722, 722, 612, 500, 300, 722, 500,
                    278, 500, 611, 500, 750, 500, 300, 667, 556, 980,
                    444, 333, 333, 611, 750, 549, 500, 500, 722, 611,
                    444, 500, 750, 500, 500, 722, 400, 500, 667, 500,
                    453, 722, 389, 667, 500, 611, 556, 611, 611, 611,
                    722, 389, 611, 333, 444, 675, 333, 500, 278, 675,
                    500, 500, 549, 500, 500, 389, 500, 300, 278, 500 };
                break;
            case 15: /* TIMES-BOLDITALIC */
                widths = new int[] { 250, 389, 555, 500, 500, 833,
                    778, 333, 333, 333, 500, 570, 250, 333, 250, 278,
                    500, 500, 500, 500, 500, 500, 500, 500, 500, 500,
                    333, 333, 570, 570, 570, 500, 832, 667, 667, 667,
                    722, 667, 667, 722, 778, 389, 500, 667, 611, 889,
                    722, 722, 611, 722, 667, 556, 611, 722, 667, 889,
                    667, 611, 611, 333, 278, 333, 570, 500, 333, 500,
                    500, 444, 500, 444, 333, 500, 556, 278, 278, 500,
                    278, 778, 556, 500, 500, 500, 389, 389, 278, 556,
                    444, 667, 500, 444, 389, 348, 220, 348, 570, 389,
                    500, 500, 167, 500, 500, 500, 500, 278, 500, 500,
                    333, 333, 556, 556, 500, 500, 500, 250, 500, 350,
                    333, 500, 500, 500, 1000, 1000, 500, 333, 333,
                    333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
                    333, 1000, 944, 266, 611, 722, 944, 300, 722,
                    278, 278, 500, 722, 500, 389, 444, 500, 556, 444,
                    611, 570, 611, 667, 500, 722, 444, 389, 444, 722,
                    722, 500, 722, 556, 667, 722, 250, 747, 667, 444,
                    500, 722, 278, 500, 611, 667, 500, 667, 389, 389,
                    278, 494, 667, 722, 556, 500, 667, 389, 444, 611,
                    611, 722, 667, 556, 608, 722, 556, 300, 722, 667,
                    667, 570, 556, 611, 494, 444, 722, 278, 667, 500,
                    444, 444, 556, 556, 722, 389, 570, 220, 747, 722,
                    389, 600, 667, 389, 500, 611, 611, 549, 722, 667,
                    278, 366, 444, 722, 667, 667, 444, 389, 278, 722,
                    500, 500, 389, 278, 722, 722, 612, 500, 300, 722,
                    576, 278, 500, 667, 500, 750, 556, 382, 667, 611,
                    1000, 444, 389, 389, 611, 750, 549, 500, 556,
                    722, 667, 444, 500, 750, 556, 556, 722, 400, 500,
                    667, 556, 549, 722, 389, 722, 500, 667, 611, 667,
                    667, 667, 722, 389, 667, 389, 500, 606, 389, 556,
                    278, 606, 500, 556, 549, 500, 500, 389, 556, 300,
                    278, 500 };
                break;
            case 16: /* SYMBOL */
                widths = new int[] { 250, 333, 713, 500, 549, 833,
                    778, 439, 333, 333, 500, 549, 250, 549, 250, 278,
                    500, 500, 500, 500, 500, 500, 500, 500, 500, 500,
                    278, 278, 549, 549, 549, 444, 549, 722, 667, 722,
                    612, 611, 763, 603, 722, 333, 631, 722, 686, 889,
                    722, 722, 768, 741, 556, 592, 611, 690, 439, 768,
                    645, 795, 611, 333, 863, 333, 658, 500, 500, 631,
                    549, 549, 494, 439, 521, 411, 603, 329, 603, 549,
                    549, 576, 521, 549, 549, 521, 549, 603, 439, 576,
                    713, 686, 493, 686, 494, 480, 200, 480, 549, 750,
                    620, 247, 549, 167, 713, 500, 753, 753, 753, 753,
                    1042, 987, 603, 987, 603, 400, 549, 411, 549,
                    549, 713, 494, 460, 549, 549, 549, 549, 1000,
                    603, 1000, 658, 823, 686, 795, 987, 768, 768,
                    823, 768, 768, 713, 713, 713, 713, 713, 713, 713,
                    768, 713, 790, 790, 890, 823, 549, 250, 713, 603,
                    603, 1042, 987, 603, 987, 603, 494, 329, 790,
                    790, 786, 713, 384, 384, 384, 384, 384, 384, 494,
                    494, 494, 494, 329, 274, 686, 686, 686, 384, 384,
                    384, 384, 384, 384, 494, 494, 494, 790 };
                break;
            case 17: /* ZAPFDINGBATS */
                widths = new int[] { 278, 974, 961, 974, 980, 719,
                    789, 790, 791, 690, 960, 939, 549, 855, 911, 933,
                    911, 945, 974, 755, 846, 762, 761, 571, 677, 763,
                    760, 759, 754, 494, 552, 537, 577, 692, 786, 788,
                    788, 790, 793, 794, 816, 823, 789, 841, 823, 833,
                    816, 831, 923, 744, 723, 749, 790, 792, 695, 776,
                    768, 792, 759, 707, 708, 682, 701, 826, 815, 789,
                    789, 707, 687, 696, 689, 786, 787, 713, 791, 785,
                    791, 873, 761, 762, 762, 759, 759, 892, 892, 788,
                    784, 438, 138, 277, 415, 392, 392, 668, 668, 390,
                    390, 317, 317, 276, 276, 509, 509, 410, 410, 234,
                    234, 334, 334, 732, 544, 544, 910, 667, 760, 760,
                    776, 595, 694, 626, 788, 788, 788, 788, 788, 788,
                    788, 788, 788, 788, 788, 788, 788, 788, 788, 788,
                    788, 788, 788, 788, 788, 788, 788, 788, 788, 788,
                    788, 788, 788, 788, 788, 788, 788, 788, 788, 788,
                    788, 788, 788, 788, 894, 838, 1016, 458, 748,
                    924, 748, 918, 927, 928, 928, 834, 873, 828, 924,
                    924, 917, 930, 931, 463, 883, 836, 836, 867, 867,
                    696, 696, 874, 874, 760, 946, 771, 865, 771, 888,
                    967, 888, 831, 873, 927, 970, 918 };
                break;
            default:
                break; /* should never happen */
        }

    }

    private void fillMetrics()
    {
        Integer id = (Integer) builtInFonts.get(this.name
            .toUpperCase());
        if (id == null)
        {
            return;
        }
        int i = id.intValue();
        switch (i)
        {
            case 1: /* courier */
            case 2:
            case 4:
                ascender = 805;
                descender = 250;
                break;
            case 3:
            case 5:
                ascender = 801;
                descender = 250;
                break;
            case 6: /* Helvetica and Arial */
            case 7:
            case 9: /* HELVETICA-OBLIQUE */
                ascender = 931;
                descender = 225;
                break;
            case 8: /* Helvetica-Bold */
            case 10: /* HELVETICA-BOLDOBLIQUE */
                ascender = 962;
                descender = 228;
                break;
            case 11: /* TIMES-ROMAN & TIMES NEW ROMAN */
            case 12:
                ascender = 898;
                descender = 218;
                break;
            case 13: /* TIMES-BOLD */
                ascender = 935;
                descender = 218;
                break;
            case 14: /* TIMES-ITALIC */
                ascender = 883;
                descender = 217;
                break;
            case 15: /* TIMES-BOLDITALIC */
                ascender = 921;
                descender = 218;
                break;
            case 16: /* SYMBOL */
                ascender = 1010;
                descender = 293;
                break;
            case 17: /* ZAPFDINGBATS */
                ascender = 820;
                descender = 143;
                break;
            default:
                break; /* should never happen */
        }
    }
    
    PdfType1Font(String name, int size, int encoding)
    {
        super(name, size, encoding);
        this.type = TYPE_1;
        this.fillWidths();
        this.fillMetrics();
    }

    PdfType1Font(String name, int style, int size, int encoding)
    {
        super(name, style, size, encoding);
        this.type = TYPE_1;
        this.fillWidths();
        this.fillMetrics();
    }

    public String getBaseFontName()
    {
        String temp = name;
        if (name.equalsIgnoreCase("Courier")
            || name.equalsIgnoreCase("CourierNew"))
        {
            temp = "Courier";
            if ((style & PdfFont.BOLD) == PdfFont.BOLD)
            {
                temp = "Courier-Bold";
            }
            if ((style & PdfFont.ITALIC) == PdfFont.ITALIC)
            {
                if (temp.length() >= 9 && temp.charAt(8) == 'B')
                {
                    temp += "Oblique";
                }
                else
                {
                    temp = "Courier-Oblique";
                }
            }
        }
        else if (temp.equalsIgnoreCase("Helvetica")
            || temp.equalsIgnoreCase("Arial"))
        {
            temp = "Helvetica";
            if ((style & PdfFont.BOLD) == PdfFont.BOLD)
            {
                temp = "Helvetica-Bold";
            }
            if ((style & PdfFont.ITALIC) == PdfFont.ITALIC)
            {
                if (temp.length() >= 11 && temp.charAt(10) == 'B')
                {
                    temp += "Oblique";
                }
                else
                {
                    temp = "Helvetica-Oblique";
                }
            }
        }
        else if (temp.equalsIgnoreCase("Times-Roman")
            || temp.equalsIgnoreCase("TimesNewRoman"))
        {
            temp = "Times-Roman";
            if ((style & PdfFont.BOLD) == PdfFont.BOLD)
            {
                temp = "Times-Bold";
            }
            if ((style & PdfFont.ITALIC) == PdfFont.ITALIC)
            {
                if (temp.length() >= 7 && temp.charAt(6) == 'B')
                {
                    temp += "Italic";
                }
                else
                {
                    temp = "Times-Italic";
                }
            }
        }
        return temp;
    }
    
    public synchronized void setStyle(int style)
    {
        if ((this.style & STROKE_AND_FILL) == STROKE_AND_FILL
            && (style & STROKE) == STROKE)
        {
                this.style &= 0xffffffdf;
                /* erase STROKE_AND_FILL style */                
        }
        if ((this.style & STROKE) == STROKE
            && (style & STROKE_AND_FILL) == STROKE_AND_FILL) 
        {
                this.style &= 0xffffffef; 
                /* erase STROKE style */                
        }
        
        final int BOLD_AND_ITALIC = BOLD | ITALIC;
        
        if ((this.style & BOLD_AND_ITALIC) == BOLD_AND_ITALIC
            && (style & BOLD) == BOLD)
        {
                this.style &= 0xfffffffb;
                /* erase ITALIC style */                
        }
        if ((this.style & BOLD_AND_ITALIC) == BOLD_AND_ITALIC
            && (style & ITALIC) == ITALIC)
        {
                this.style &= 0xfffffffd;
                /* erase BOLD style */                
        }

        this.style |= style;
    }

    public int getWidth(char c)
    {
        if ((c - 32) >= 0) 
        {
            try {
            return widths[c - 32];
            }
            catch (IndexOutOfBoundsException iobe) { }
        }
        
        return Character.isWhitespace(c) ? 0 : 1000; /*default width*/
    }

    public int getWidth(String text)
    {
        int total = 0;
        
        for (int i = 0, limit = text.length(); i < limit; i++)
        {
            total += getWidth(text.charAt(i));
        }
        return total;
    }
    
    public double getWidth(char c, int mu)
    {
        return PdfMeasurement.convertToMeasurementUnit(mu,
            getWidth(c) * 0.001f * this.size);
    }
    
    public double getWidth(String text, int mu)
    {
        double total = 0;
        
        for (int i = 0; i < text.length(); i++)
        {
            total += getWidth(text.charAt(i), mu);
        }
        return total;
    }
    
    public int getUnderlinePosition()
    {
        return 100; //0.1 points 
    }
    
    public int getUnderlineThickness()
    {
        return 50; //0.05 points
    }
    
    public double getHeight()
    {
        return (ascender + descender) * size * 1.08 / 1000;
    }

    public int[] getWidths()
    {
        return widths;
    }

    public void getData(HashMap hm)
    {
        hm.put(new PdfName(PDF_SUBTYPE), new PdfName(
            PDF_TYPE1));
        hm.put(new PdfName(PDF_BASEFONT),
            new PdfName(getBaseFontName()));
        hm.put(new PdfName(PDF_ENCODING),
            new PdfName(PDF_WINANSIENCODING));
    }

    public Object clone()
    {
        return (PdfType1Font) super.clone();
    }
}